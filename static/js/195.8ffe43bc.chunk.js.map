{"version":3,"file":"static/js/195.8ffe43bc.chunk.js","mappings":"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","sources":["../node_modules/style-to-object/index.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/react-is/index.js","../node_modules/@chakra-ui/button/dist/chakra-ui-button.esm.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/index.mjs","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js","../node_modules/react-is/cjs/react-is.production.min.js","../node_modules/prop-types/index.js","../node_modules/is-buffer/index.js"],"sourcesContent":["var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","import { useMergeRefs } from '@chakra-ui/hooks';\nimport { forwardRef, chakra, useStyleConfig, omitThemingProps } from '@chakra-ui/system';\nimport { cx, __DEV__, mergeWith, dataAttr } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { createContext } from '@chakra-ui/react-utils';\nimport { Spinner } from '@chakra-ui/spinner';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar _excluded$4 = [\"size\", \"colorScheme\", \"variant\", \"className\", \"spacing\", \"isAttached\", \"isDisabled\"];\n\nvar _createContext = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n}),\n    ButtonGroupProvider = _createContext[0],\n    useButtonGroup = _createContext[1];\nvar ButtonGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var size = props.size,\n      colorScheme = props.colorScheme,\n      variant = props.variant,\n      className = props.className,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      isAttached = props.isAttached,\n      isDisabled = props.isDisabled,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$4);\n\n  var _className = cx(\"chakra-button__group\", className);\n\n  var context = React.useMemo(function () {\n    return {\n      size: size,\n      colorScheme: colorScheme,\n      variant: variant,\n      isDisabled: isDisabled\n    };\n  }, [size, colorScheme, variant, isDisabled]);\n  var groupStyles = {\n    display: \"inline-flex\"\n  };\n\n  if (isAttached) {\n    groupStyles = _extends({}, groupStyles, {\n      \"> *:first-of-type:not(:last-of-type)\": {\n        borderEndRadius: 0\n      },\n      \"> *:not(:first-of-type):not(:last-of-type)\": {\n        borderRadius: 0\n      },\n      \"> *:not(:first-of-type):last-of-type\": {\n        borderStartRadius: 0\n      }\n    });\n  } else {\n    groupStyles = _extends({}, groupStyles, {\n      \"& > *:not(style) ~ *:not(style)\": {\n        marginStart: spacing\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ButtonGroupProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    role: \"group\",\n    __css: groupStyles,\n    className: _className\n  }, rest)));\n});\n\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\";\n}\n\nvar _excluded$3 = [\"label\", \"placement\", \"spacing\", \"children\", \"className\", \"__css\"];\nvar ButtonSpinner = function ButtonSpinner(props) {\n  var label = props.label,\n      placement = props.placement,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      _props$children = props.children,\n      children = _props$children === void 0 ? /*#__PURE__*/React.createElement(Spinner, {\n    color: \"currentColor\",\n    width: \"1em\",\n    height: \"1em\"\n  }) : _props$children,\n      className = props.className,\n      __css = props.__css,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$3);\n\n  var _className = cx(\"chakra-button__spinner\", className);\n\n  var marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  var spinnerStyles = React.useMemo(function () {\n    var _extends2;\n\n    return _extends((_extends2 = {\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\"\n    }, _extends2[marginProp] = label ? spacing : 0, _extends2.fontSize = \"1em\", _extends2.lineHeight = \"normal\", _extends2), __css);\n  }, [__css, label, marginProp, spacing]);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest, {\n    __css: spinnerStyles\n  }), children);\n};\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\";\n}\n\nvar _excluded$2 = [\"children\", \"className\"];\nvar ButtonIcon = function ButtonIcon(props) {\n  var children = props.children,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$2);\n\n  var _children = /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n\n  var _className = cx(\"chakra-button__icon\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    display: \"inline-flex\",\n    alignSelf: \"center\",\n    flexShrink: 0\n  }, rest, {\n    className: _className\n  }), _children);\n};\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\";\n}\n\nfunction useButtonType(value) {\n  var _React$useState = React.useState(!value),\n      isButton = _React$useState[0],\n      setIsButton = _React$useState[1];\n\n  var refCallback = React.useCallback(function (node) {\n    if (!node) return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  var type = isButton ? \"button\" : undefined;\n  return {\n    ref: refCallback,\n    type: type\n  };\n}\n\nvar _excluded$1 = [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"leftIcon\", \"rightIcon\", \"loadingText\", \"iconSpacing\", \"type\", \"spinner\", \"spinnerPlacement\", \"className\", \"as\"];\nvar Button = /*#__PURE__*/forwardRef(function (props, ref) {\n  var group = useButtonGroup();\n  var styles = useStyleConfig(\"Button\", _extends({}, group, props));\n\n  var _omitThemingProps = omitThemingProps(props),\n      _omitThemingProps$isD = _omitThemingProps.isDisabled,\n      isDisabled = _omitThemingProps$isD === void 0 ? group == null ? void 0 : group.isDisabled : _omitThemingProps$isD,\n      isLoading = _omitThemingProps.isLoading,\n      isActive = _omitThemingProps.isActive,\n      isFullWidth = _omitThemingProps.isFullWidth,\n      children = _omitThemingProps.children,\n      leftIcon = _omitThemingProps.leftIcon,\n      rightIcon = _omitThemingProps.rightIcon,\n      loadingText = _omitThemingProps.loadingText,\n      _omitThemingProps$ico = _omitThemingProps.iconSpacing,\n      iconSpacing = _omitThemingProps$ico === void 0 ? \"0.5rem\" : _omitThemingProps$ico,\n      type = _omitThemingProps.type,\n      spinner = _omitThemingProps.spinner,\n      _omitThemingProps$spi = _omitThemingProps.spinnerPlacement,\n      spinnerPlacement = _omitThemingProps$spi === void 0 ? \"start\" : _omitThemingProps$spi,\n      className = _omitThemingProps.className,\n      as = _omitThemingProps.as,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded$1);\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n\n\n  var buttonStyles = React.useMemo(function () {\n    var _styles$_focus;\n\n    var _focus = mergeWith({}, (_styles$_focus = styles == null ? void 0 : styles[\"_focus\"]) != null ? _styles$_focus : {}, {\n      zIndex: 1\n    });\n\n    return _extends({\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      width: isFullWidth ? \"100%\" : \"auto\"\n    }, styles, !!group && {\n      _focus: _focus\n    });\n  }, [styles, group, isFullWidth]);\n\n  var _useButtonType = useButtonType(as),\n      _ref = _useButtonType.ref,\n      defaultType = _useButtonType.type;\n\n  var contentProps = {\n    rightIcon: rightIcon,\n    leftIcon: leftIcon,\n    iconSpacing: iconSpacing,\n    children: children\n  };\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    disabled: isDisabled || isLoading,\n    ref: useMergeRefs(ref, _ref),\n    as: as,\n    type: type != null ? type : defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className)\n  }, rest), isLoading && spinnerPlacement === \"start\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--start\",\n    label: loadingText,\n    placement: \"start\",\n    spacing: iconSpacing\n  }, spinner), isLoading ? loadingText || /*#__PURE__*/React.createElement(chakra.span, {\n    opacity: 0\n  }, /*#__PURE__*/React.createElement(ButtonContent, contentProps)) : /*#__PURE__*/React.createElement(ButtonContent, contentProps), isLoading && spinnerPlacement === \"end\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--end\",\n    label: loadingText,\n    placement: \"end\",\n    spacing: iconSpacing\n  }, spinner));\n});\n\nif (__DEV__) {\n  Button.displayName = \"Button\";\n}\n\nfunction ButtonContent(props) {\n  var leftIcon = props.leftIcon,\n      rightIcon = props.rightIcon,\n      children = props.children,\n      iconSpacing = props.iconSpacing;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, leftIcon && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), children, rightIcon && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n}\n\nvar _excluded = [\"icon\", \"children\", \"isRound\", \"aria-label\"];\nvar IconButton = /*#__PURE__*/forwardRef(function (props, ref) {\n  var icon = props.icon,\n      children = props.children,\n      isRound = props.isRound,\n      ariaLabel = props[\"aria-label\"],\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n  /**\n   * Passing the icon as prop or children should work\n   */\n\n\n  var element = icon || children;\n\n  var _children = /*#__PURE__*/React.isValidElement(element) ? /*#__PURE__*/React.cloneElement(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : undefined,\n    ref: ref,\n    \"aria-label\": ariaLabel\n  }, rest), _children);\n});\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\";\n}\n\nexport { Button, ButtonGroup, ButtonSpinner, IconButton, useButtonGroup };\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n"],"names":["parse","require","StyleToObject","style","iterator","declaration","output","property","value","declarations","hasIterator","i","len","length","module","exports","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","_objectWithoutPropertiesLoose","source","excluded","key","target","sourceKeys","Object","keys","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_excluded$4","_createContext","createContext","strict","ButtonGroupProvider","useButtonGroup","ButtonGroup","forwardRef","ref","size","colorScheme","variant","className","_props$spacing","spacing","isAttached","isDisabled","rest","_className","cx","context","React","groupStyles","display","borderEndRadius","borderRadius","borderStartRadius","marginStart","chakra","div","role","__css","__DEV__","displayName","_excluded$3","ButtonSpinner","label","placement","_props$children","children","Spinner","color","width","height","marginProp","spinnerStyles","_extends2","alignItems","position","fontSize","lineHeight","_excluded$2","ButtonIcon","_children","focusable","span","alignSelf","flexShrink","_excluded$1","Button","group","styles","useStyleConfig","_omitThemingProps","omitThemingProps","_omitThemingProps$isD","isLoading","isActive","isFullWidth","leftIcon","rightIcon","loadingText","_omitThemingProps$ico","iconSpacing","type","spinner","_omitThemingProps$spi","spinnerPlacement","as","buttonStyles","_styles$_focus","_focus","mergeWith","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","_useButtonType","_React$useState","isButton","setIsButton","tagName","undefined","useButtonType","_ref","defaultType","contentProps","button","disabled","useMergeRefs","dataAttr","opacity","ButtonContent","marginEnd","_excluded","IconButton","icon","isRound","ariaLabel","padding","hasOwn","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","options","enumerable","configurable","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","start","line","Position","whitespace","end","content","errorsList","error","msg","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","prop","val","ret","decl","decls","stringifyPosition","point","index","VFileMessage","place","origin","parts","super","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","includes","assertNonEmpty","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","_len2","_key2","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","done","then","_len4","_key4","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","add","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","Promise","executor","resolve","reject","tree","runSync","complete","assertDone","process","isBuffer","processSync","destination","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","anyFactory","propsFactory","CONTINUE","EXIT","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","types","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","sizes","slot","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cy","defaultAction","descent","diffuseConstant","direction","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","ReactIs","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","dashes","find","padRight","padLeft","commas","v","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","u","b","for","e","f","g","h","l","n","p","q","t","a","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId"],"sourceRoot":""}